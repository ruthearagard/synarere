# synarere example configuration.
# This configuration is straight forward.

# module: Load modules.
# You may specify multiple 'module' blocks.
#
# module:
#       name = path/to/file.py

# network: Networks to connect to.
# You may specify multiple 'network' blocks.
network:
        # id: The name of the network.
        # This can be anything you wish.
        id = Testnet

        # address: The address of the server.
        # IPv4/6 IP addresses are supported.
        address = muffinpimp.net

        # port: The port to connect on.
        port = 6668

        # nick: Our nick to use.
        nick = synarere

        # ident: Our user (ident) to use.
        ident = synarare

        # gecos: Our GECOS (real name) to use.
        gecos = better times ahead

        # pass: If this server requires a password, specify it here.
        # Comment this out if you do not need it.
        # pass = lolcake

        # chans: The channels to join.
        # You may specify multiples by using a comma.
        chans = #test

        # recontime: When the connection is lost, reconnect in 'x' amount of seconds.
        # Optional.
        # recontime = 30

        # trigger: Trigger used for channel commands (not chanme)
        trigger = .

# logger: Logs messages to a file.
logger:
        # path: The path to the logfile.
        path = etc/synarere.log

        # level: The verbosity level of the log.
        # Valid options are: info, warning, error, critical, debug.
        level = debug

        # max_size: The file size (in kilobytes) before the log is rotated.
        # If set to 0, the log will never rotate.
        max_size = 100

        # max_logs: The maximum number of rotated logs to keep around.
        # If set to 0, unlimited number of logs will be kept.
        max_logs = 5

        # format: If you know how to manipulate Python's logger module's formatting,
        # then feel free to change this to whatever you want. If you don't, do not touch this.
        # However, some examples are:
        #
        # Liberal: [%(asctime)s] %(message)s
        # Verbose: [%(asctime)s] -- %(levelname)s(%(module)s:%(lineno)s): %(message)s
        # Medium: [%(asctime)s] -- %(levelname)s: %(message)s
        format = [%(asctime)s] -- %(levelname)s: %(message)s

        # stream_format: Same as 'format', except this is used when we are in
        # nofork mode.
        stream_format = [%(asctime)s] -- %(levelname)s: %(message)s

# options: Defines various options for synarere.
options:
        # pidfile: The file to write the PID to.
        pidfile = etc/synarere.pid

        # tbfile: The file to write the tracebacks to.
        tbfile = etc/synarere.tb

        # irc_cmd_thread: When dispatching raw IRC commands, such as
        # PRIVMSG or MAP or something else, should we dispatch on a thread?
        # NOTE: This is generally useless, but if you want it so be it.
        # irc_cmd_thread = False

        # chan_cmd_thread: When dispatching channel commands, should we
        # dispatch it on a thread? This is generally a good idea to handle multiple people.
        # chan_cmd_thread = True

        # chanme_cmd_thread: When dispatching channel me commands, should we dispatch
        # it on a thread? REMEMBER: chan_cmd's are virtually the same as chanme_cmd's,
        # So if you have that threaded, thread this to.
        # chanme_cmd_thread = True

        # priv_cmd_thread: When dispatching private messages to users, should we dispatch
        # it on a thread? This has the same reasoning as the former options.
        # priv_cmd_thread = True

        # ctcp_cmd_thread: When dispatching CTCP commands to channels or users, should we
        # dispatch it on a thread? This is generally useless.
        # ctcp_cmd_thread = False
